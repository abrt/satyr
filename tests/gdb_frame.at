# Checking the satyr. -*- Autotest -*-

AT_BANNER([GDB frames])

## ---------------- ##
## sr_gdb_frame_dup ##
## ---------------- ##
AT_TESTFUN([sr_gdb_frame_dup],
[[
#include "gdb/frame.h"
#include "utils.h"
#include <assert.h>

int
main(void)
{
  struct sr_gdb_frame *frame1 = sr_gdb_frame_new();;
  frame1->function_name = sr_strdup("test1");
  frame1->function_type = sr_strdup("type1");
  frame1->number = 10;
  frame1->source_file = sr_strdup("file1");
  frame1->source_line = 11;
  frame1->address = 12;

  struct sr_gdb_frame *frame0 = sr_gdb_frame_new();;
  frame0->function_name = sr_strdup("test0");
  frame0->function_type = sr_strdup("type0");
  frame0->number = 13;
  frame0->source_file = sr_strdup("file0");
  frame0->source_line = 14;
  frame0->address = 15;
  frame0->next = frame1;

  /* Test the duplication without siblings. */
  struct sr_gdb_frame *frame = sr_gdb_frame_dup(frame0, false);
  assert(NULL == frame->next);
  assert(frame->function_name != frame0->function_name);
  assert(frame->function_type != frame0->function_type);
  assert(frame->source_file != frame0->source_file);
  assert(0 == sr_gdb_frame_cmp(frame, frame0, true));
  sr_gdb_frame_free(frame);

  /* Test the duplication with the siblings. */
  frame = sr_gdb_frame_dup(frame0, true);
  assert(frame->function_name != frame0->function_name);
  assert(frame->function_type != frame0->function_type);
  assert(frame->source_file != frame0->source_file);
  assert(0 == sr_gdb_frame_cmp(frame, frame0, true));
  assert(frame->next != frame1);
  assert(0 == sr_gdb_frame_cmp(frame->next, frame1, true));
  sr_gdb_frame_free(frame->next);
  sr_gdb_frame_free(frame);

  sr_gdb_frame_free(frame1);
  sr_gdb_frame_free(frame0);
  return 0;
}
]])

## ------------------------------ ##
## sr_gdb_frame_parse_frame_start ##
## ------------------------------ ##
AT_TESTFUN([sr_gdb_frame_parse_frame_start],
[[
#include "gdb/frame.h"
#include <assert.h>

/**
 * @param input
 * The input text stream.
 * @param parsed_char_count
 * The expected number of characters parsed (taken) from input.
 * @param expected_frame_number
 * The expected parsed frame number.
 */
static void
check(char *input,
      int parsed_char_count,
      unsigned expected_frame_number)
{
  int number;
  char *old_input = input;
  assert(parsed_char_count == sr_gdb_frame_parse_frame_start(&input, &number));
  if (0 < parsed_char_count)
  {
    assert(number == expected_frame_number);
    assert(*input == '\0');
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
  }
}

int
main(void)
{
  check("#10 "    , 4, 10);
  check("#0  "    , 4, 0);
  check("#99999  ", 8, 99999);
  check("ab "     , 0, 0);
  check("#ab "    , 0, 0);
  check("#-9999 " , 0, 9999);
  return 0;
}
]])

## ------------------------------- ##
## sr_gdb_frame_parseadd_operator ##
## ------------------------------- ##
AT_TESTFUN([sr_gdb_frame_parseadd_operator],
[[
#include "gdb/frame.h"
#include <assert.h>
#include <string.h>

static void
check(char *input, int parsed_length)
{
  printf("Testing '%s' -> %d\n", input, parsed_length);
  char *old_input = input;
  GString *strbuf = g_string_new(NULL);
  assert(parsed_length == sr_gdb_frame_parseadd_operator(&input, strbuf));
  printf("  input = '%s', old_input = '%s'\n", input, old_input);

  /* Check that the input pointer was updated properly. */
  assert(*input == old_input[parsed_length]);

  /* Check that the strbuf has been modified accordingly to what was parsed. */
  assert(0 == strncmp(strbuf->str, old_input, parsed_length));
  assert(strbuf->len == parsed_length);

  g_string_free(strbuf, TRUE);
}

int
main(void)
{
  check("operator>", strlen("operator>"));
  check("operator->", strlen("operator->"));
  check("operator new", strlen("operator new"));
  check("operator new[]", strlen("operator new[]"));
  check("operator delete", strlen("operator delete"));
  check("operator del", 0);
  check("operator delete[] (test)", strlen("operator delete[]"));
  /* Red Hat Bugzilla bug #542445 */
  check("cairo_add_operator (test)", 0);
  return 0;
}
]])

## --------------------------------- ##
## sr_gdb_frame_parse_function_name ##
## --------------------------------- ##
AT_TESTFUN([sr_gdb_frame_parse_function_name],
[[
#include "gdb/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <string.h>

static void
check(bool success, char *input)
{
  /* Function name must be ended with a space. */
  char *input_with_space = g_malloc(strlen(input) + 2);
  strcpy(input_with_space, input);
  input_with_space[strlen(input)] = ' ';
  input_with_space[strlen(input) + 1] = '\0';

  char *function_name = NULL, *function_type = NULL;
  char *old_input_with_space = input_with_space;
  printf("Parsing '%s'\n", input);
  struct sr_location location;
  sr_location_init(&location);
  assert(success == sr_gdb_frame_parse_function_name(&input_with_space,
                                                     &function_name,
                                                     &function_type,
                                                     &location));

  if (success)
  {
    assert(function_name);
    printf("Function name '%s'\n", function_name);
    assert(strcmp(function_name, input) == 0);
    assert(function_type == NULL);
    free(function_name);
    assert(*input_with_space == ' ');
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input_with_space == input_with_space);
  }

  free(old_input_with_space);
}

int
main(void)
{
  check(true, "??");
  check(true, "IA__g_bookmark_file_to_file");
  check(true, "pthread_cond_timedwait@@GLIBC_2.3.2");
  check(true, "_pixman_walk_composite_region");
  check(true, "CairoOutputDev::tilingPatternFill");
  check(true, "sdr::(anonymous namespace)::ViewContact::~ViewContact");
  check(true, "operator==<nsIAtom, nsICSSPseudoClass>");
  check(true, "wait_until<std::unique_lock<bmalloc::Mutex>, std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1l, 1000000000l> >, bmalloc::AsyncTask<Object, Function>::entryPoint() [with Object = bmalloc::Heap; Function = void (bmalloc::Heap::*)()]::<lambda()> >");
  return 0;
}
]])

## ---------------------------------------------- ##
## sr_gdb_frame_parse_function_name_template_args ##
## ---------------------------------------------- ##
AT_TESTFUN([sr_gdb_frame_parse_function_name_template_args],
[[
#include "gdb/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

static int
check(const char *input, size_t len)
{
    if (len == -1)
        len = strlen(input);

    char *local_input = sr_strdup(input);
    char *old_input = local_input;

    char *namechunk = (char *)0xDEADBEEF;
    size_t chars = sr_gdb_frame_parse_function_name_template_args(&local_input, &namechunk);

    if (len == 0 && chars != 0)
    {
        fprintf(stderr, "NOT Failed to parse: '%s'\n", input);
        return 1;
    }

    if (len != 0  && chars == 0)
    {
        fprintf(stderr, "Failed to parse    : '%s'\n", input);
        return 1;
    }

    if (len != 0 && chars != len)
    {
        fprintf(stderr, "Reported invalid number of read characters > expected"
                        ": %d ; got : %d ; input : '%s'\n", chars, len, input);
        return 1;
    }

    if (chars != 0 && namechunk == (char *)0xDEADBEEF)
    {
        fprintf(stderr, "Did not return parsed data : '%s'\n", input);
        return 1;
    }

    if (chars == 0 && namechunk != (char *)0xDEADBEEF)
    {
        fprintf(stderr, "Touched the output variable when failed : '%s'\n", input);
        return 1;
    }

    if (chars != 0 && strncmp(namechunk, input, len) != 0)
    {
        fprintf(stderr, "Invalid output > expected : '%*s', got : '%s'\n", len, namechunk);
        return 1;
    }

    if (namechunk != (char *)0xDEADBEEF)
    {
        free(namechunk);
    }

    free(old_input);
    return 0;
}

/* m4 does not allow unbalanced square brackets, so we have to use "Quadrigaph"
 * @<:@ and @:>@.
 */

int
main(int argc, char *argv[])
{
    int res = 0;

    res += check(" []", 0);
    res += check(" @<:@with ", 0);
    res += check(" @<:@with @<:@", 0);
    res += check(" [within ]", 0);

    res += check(" [with [@<:@[]]]", 0);
    res += check(" @<:@with [[[]]]", 0);
    res += check(" @<:@with [a][b][c][d][e]", 0);

    /* -1 == succeeds and read full input */
    res += check(" [with ]", -1);
    res += check(" [with ]@:>@", strlen(" [with ]"));

    res += check(" [with [a][b][c][d]]", -1);
    res += check(" [with [f = [ d([g[e]])]]]", -1);
    res += check(" [with j() = [h<[i]>]; k = [l, m, n~[o]]]", -1);

    res += check(" [with Func = boost:graphs::bfs<tr1::distance([blah])>()]", -1);
    res += check(" [with Object = std::map<std::string, std::string>; Func = boost:graphs::bfs<tr1::distance([blah])>(); Param = int]", -1);

    return res;
}
]])

## ------------------------------- ##
## sr_gdb_frame_skip_function_args ##
## ------------------------------- ##

AT_TESTFUN([sr_gdb_frame_skip_function_args],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>

static void
check(bool success, char *input)
{
  char *old_input = input;
  struct sr_location location;
  sr_location_init(&location);
  assert(success == sr_gdb_frame_skip_function_args(&input, &location));
  if (success)
  {
    assert(*input == '\0');
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
  }
}

int
main(void)
{
  /* minimal */
  check(true, "()");
  /* newline */
  check(true, "(\n"
              "page=0x7f186003e280, \n"
              "cairo=0x7f18600efd10, printing=0)");
  /* value optimized out */
  check(true, "(this=0x7f1860023400, DPI=<value optimized out>)");
  /* string */
  check(true, "(filename=0x18971b0 \"/home/jfclere/.recently-used.xbel\")");
  /* problematic frame #33 from rhbz#803600 */
  check(true, "(func=<function at remote 0x1b3aa28>, arg=(<vmmAsyncJob(show_progress=False, topwin=<gtk.Window at remote 0x1b43690>, cancel_args=[<...>], _gobject_handles=[], _signal_id_map={}, cancel_job=None, window=<gtk.glade.XML at remote 0x1b43aa0>, _gobject_timeouts=[], config=<vmmConfig(rhel6_defaults=False, support_threading=True, glade_dir='/usr/share/virt-manager', _spice_error=None, conf_dir='/apps/virt-manager', appname='virt-manager', libvirt_packages=['libvirt'], support_inspection=False, keyring=None, appversion='0.9.0', preferred_distros=['rhel', 'fedora'], hv_packages=['qemu-kvm'], conf=<gconf.Client at remote 0x17ea9b0>, _objects=@<:@'<vmmErrorDialog object at 0x1885460 (virtManager+error+vmmErrorDialog at 0xfe9080)>', '<vmmEngine object at 0x1acaaf0 (virtManager+engine+vmmEngine at 0xfe8920)>', '<vmmErrorDialog object at 0x1acacd0 (virtManager+error+vmmErrorDialog at 0xfe2000)>', '<vmmSystray object at 0x1acad20 (virtManager+systray+vmmSystray at 0xfe8e60)>', '<vmmErrorDialog object at 0x1acad70 (virtManager+error+vmmErrorDialog at 0xd9b120)>', '<vm...(truncated), kw={})");
  /* TODO: parentesis balance */
  return 0;
}
]])

## -------------------------------- ##
## sr_gdb_frame_parse_function_call ##
## -------------------------------- ##
AT_TESTFUN([sr_gdb_frame_parse_function_call],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>

static void
check(bool success,
      char *input,
      char *expected_function_name,
      char *expected_function_type)
{
  char *old_input = input;
  char *function_name, *function_type;
  struct sr_location location;
  sr_location_init(&location);
  assert(success == sr_gdb_frame_parse_function_call(&input,
                                                  &function_name,
                                                  &function_type,
                                                  &location));
  if (success)
  {
    printf("Expected: '%s', got '%s'\n", expected_function_name, function_name);
    assert(0 == strcmp(expected_function_name, function_name));
    assert((!expected_function_type && !function_type) ||
           0 == strcmp(expected_function_type, function_type));
    assert(*input == '\0');
    free(function_name);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
  }
}

int
main(void)
{
  /* minimal */
  check(true, "?? ()", "??", NULL);
  check(true, "fsync ()", "fsync", NULL);
  /* newlines */
  check(true,
    "write_to_temp_file (\n"
      "filename=0x18971b0 \"/home/jfclere/.recently-used.xbel\", \n"
      "contents=<value optimized out>, length=29917, error=0x7fff3cbe4110)",
    "write_to_temp_file",
    NULL);
  /* C++ */
  check(true,
        "osgText::Font::GlyphTexture::apply(osg::State&) const ()",
        "osgText::Font::GlyphTexture::apply(osg::State&) const",
        NULL);
  check(true,
        "osgUtil::RenderStage::drawInner(osg::RenderInfo&, osgUtil::RenderLeaf*&, bool&) ()",
        "osgUtil::RenderStage::drawInner(osg::RenderInfo&, osgUtil::RenderLeaf*&, bool&)",
        NULL);
  check(true,
        "nsRegion::RgnRect::operator new ()",
        "nsRegion::RgnRect::operator new",
        NULL);
  check(true,
        "sigc::internal::slot_call0<sigc::bound_mem_functor0<void, Driver>, void>::call_it (this=0x6c)",
        "sigc::internal::slot_call0<sigc::bound_mem_functor0<void, Driver>, void>::call_it",
        NULL);
  check(true,
        "sigc::internal::slot_call0<sigc::bound_mem_functor0<void, GameWindow>, void>::call_it(sigc::internal::slot_rep*) ()",
        "sigc::internal::slot_call0<sigc::bound_mem_functor0<void, GameWindow>, void>::call_it(sigc::internal::slot_rep*)",
        NULL);
  /* C++ operator< and templates */
  check(true,
        "operator< <char, std::char_traits<char>, std::allocator<char> > (__s1=<value optimized out>)",
        "operator< <char, std::char_traits<char>, std::allocator<char> >",
        NULL);
  /* C++ plain operator-> */
  check(true, "operator-> ()", "operator->", NULL);
  /* Not an operator, but includes the keyword 'operator' (Red Hat Bugzilla bug #542445) */
  check(true,
        "cairo_set_operator (cr=0x0, op=CAIRO_OPERATOR_OVER)",
        "cairo_set_operator",
        NULL);
  /* type included */
  #define TYPE "void"
  #define FUNCTION "boost::throw_exception<"                          \
                   "boost::filesystem::basic_filesystem_error<"       \
                   "boost::filesystem::basic_path<"                   \
                   "std::basic_string<"                               \
                   "char, std::char_traits<char>, "                   \
                   "std::allocator<char> >, "                         \
                   "boost::filesystem::path_traits> > >"              \
                   "(boost::filesystem::basic_filesystem_error<"      \
                   "boost::filesystem::basic_path<"                   \
                   "std::basic_string<char, std::char_traits<char>, " \
                   "std::allocator<char> >, "                         \
                   "boost::filesystem::path_traits> > const&)"
  #define ARGS "()"
  #define FUNCALL TYPE " " FUNCTION " " ARGS
  check(true, FUNCALL, FUNCTION, TYPE);
  return 0;
}
]])

## -------------------------------------- ##
## sr_gdb_frame_parse_address_in_function ##
## -------------------------------------- ##
AT_TESTFUN([sr_gdb_frame_parse_address_in_function],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>

static void
check(bool success,
      char *input,
      uint64_t expected_address,
      char *expected_function)
{
  char *old_input = input;
  char *function;
  char *type;
  uint64_t address;
  struct sr_location location;
  sr_location_init(&location);
  assert(success == sr_gdb_frame_parse_address_in_function(&input,
                                                           &address,
                                                           &function,
                                                           &type,
                                                           &location));
  if (success)
  {
    assert(strcmp(function, expected_function) == 0);
    assert(address == expected_address);
    assert(*input == '\0');
    free(function);
    free(type);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
  }
}

int
main(void)
{
  /* minimal */
  check(true, "raise (sig=6)", -1, "raise");
  /* still simple */
  check(true, "0x00ad0a91 in raise (sig=6)", 0xad0a91, "raise");
  /* longnum */
  check(true, "0xf00000322221730e in IA__g_bookmark_file_to_file (\n"
    "filename=0x18971b0 \"/home/jfclere/.recently-used.xbel\", \n"
    "error=0x7fff3cbe4160)", 0xf00000322221730eULL,
    "IA__g_bookmark_file_to_file");
  return 0;
}
]])

## -------------------------------- ##
## sr_gdb_frame_parse_file_location ##
## -------------------------------- ##

AT_TESTFUN([sr_gdb_frame_parse_file_location],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>

static void
check(bool success,
      char *input,
      char *expected_file,
      unsigned expected_line)
{
  char *old_input = input;
  char *file;
  unsigned line;
  struct sr_location location;
  sr_location_init(&location);
  assert(success == sr_gdb_frame_parse_file_location(&input,
                                                     &file,
                                                     &line,
                                                     &location));
  if (success)
  {
    assert(strcmp(file, expected_file) == 0);
    assert(line == expected_line);
    assert(*input == '\0');
    free(file);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
  }
}

int
main(void)
{
  /* Test with a newline and without a line number. */
  check(true, "\n at gtkrecentmanager.c", "gtkrecentmanager.c", -1);

  /* Test with a newline and with a line number.  */
  check(true, "\n at gtkrecentmanager.c:1377", "gtkrecentmanager.c", 1377);

  /* Test without a newline and a file name with a dash and an upper letter. */
  check(true,
        " at ../sysdeps/unix/syscall-template.S:82",
        "../sysdeps/unix/syscall-template.S",
        82);

  /* A file name starting with an underscore: Red Hat Bugzilla bug #530678. */
  check(true,
        " at _polkitauthenticationagent.c:885",
        "_polkitauthenticationagent.c",
        885);

  return 0;
}
]])

## ------------------------- ##
## sr_gdb_frame_parse_header ##
## ------------------------- ##
AT_TESTFUN([sr_gdb_frame_parse_header],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

static void
check(char *input,
      struct sr_gdb_frame *expected_frame)
{
  printf("=================================================\n"
         "Testing %s\n",
         input);

  char *old_input = input;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_gdb_frame *frame = sr_gdb_frame_parse_header(&input, &location);
  if (frame)
  {
    assert(*input == '\0');
    assert(sr_gdb_frame_cmp(frame, expected_frame, true) == 0);
    sr_gdb_frame_free(frame);
  }
  else
  {
    printf(" - parsing failed: %d:%d %s\n", location.line, location.column, location.message);

    /* Check that the pointer is not moved. */
    assert(old_input == input);
    assert(!expected_frame);
  }
}

int
main(void)
{
  /* no function address - rhbz#752811 */
  struct sr_gdb_frame frame;
  sr_gdb_frame_init(&frame);
  frame.function_name = "slot_tp_getattr_hook";
  frame.number = 0;
  frame.source_file = "/usr/src/debug/Python-2.7.1/Objects/typeobject.c";
  frame.source_line = 5436;
  frame.address = -1;
  check("#0  slot_tp_getattr_hook (self=<YumAvailableP...>) at /usr/src/debug/Python-2.7.1/Objects/typeobject.c:5436", &frame);

  /* basic */
  sr_gdb_frame_init(&frame);
  frame.function_name = "fsync";
  frame.number = 1;
  frame.source_file = "../sysdeps/unix/syscall-template.S";
  frame.source_line = 82;
  frame.address = 0x322160e7fdULL;
  check("#1  0x000000322160e7fd in fsync () at ../sysdeps/unix/syscall-template.S:82", &frame);

  /* C++ */
  sr_gdb_frame_init(&frame);
  frame.function_name = "nsRegion::RgnRect::operator new";
  frame.number = 4;
  frame.source_file = "nsRegion.cpp";
  frame.source_line = 214;
  frame.address = 0x3f96d71056ULL;
  check("#4  0x0000003f96d71056 in nsRegion::RgnRect::operator new ()\n"
        "    at nsRegion.cpp:214", &frame);

  /* Templates and no filename. */
  sr_gdb_frame_init(&frame);
  frame.function_name = "sigc::internal::slot_call0<sigc::bound_mem_functor0<void, GameWindow>, void>::call_it(sigc::internal::slot_rep*)";
  frame.number = 15;
  frame.address = 0x08201bdfULL;
  check("#15 0x08201bdf in sigc::internal::slot_call0<sigc::bound_mem_functor0<void, GameWindow>,"
        " void>::call_it(sigc::internal::slot_rep*) ()", &frame);

  /* No address, just the function call. Red Hat Bugzilla bug #530678 */
  sr_gdb_frame_init(&frame);
  frame.function_name = "handle_message";
  frame.number = 30;
  frame.source_file = "_polkitauthenticationagent.c";
  frame.source_line = 885;
  check("#30 handle_message (message=<value optimized out>,\n"
        "interface=<value optimized out>) at _polkitauthenticationagent.c:885", &frame);

  return 0;
}
]])

## ------------------ ##
## sr_gdb_frame_parse ##
## ------------------ ##

AT_TESTFUN([sr_gdb_frame_parse],
[[
#include "gdb/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <string.h>

static void
check(char *input,
      struct sr_gdb_frame *expected_frame,
      char *expected_input,
      struct sr_location *expected_location)
{
  char *old_input = input;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_gdb_frame *frame = sr_gdb_frame_parse(&input, &location);
  assert(input == expected_input);
  if (frame)
  {
    assert(0 == sr_gdb_frame_cmp(frame, expected_frame, true));
    puts(sr_location_to_string(&location));
    puts(sr_location_to_string(expected_location));
    assert(0 == sr_location_cmp(&location, expected_location, true));
    sr_gdb_frame_free(frame);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
    assert(0 == sr_location_cmp(&location, expected_location, true));
    assert(!expected_frame);
  }
}

int
main(void)
{
  /* basic */
  struct sr_gdb_frame frame;
  sr_gdb_frame_init(&frame);
  frame.function_name = "fsync";
  frame.number = 1;
  frame.source_file = "../sysdeps/unix/syscall-template.S";
  frame.source_line = 82;
  frame.address = 0x322160e7fdULL;
  char *c = "#1  0x000000322160e7fd in fsync () at ../sysdeps/unix/syscall-template.S:82\n"
            "No locals.";
  struct sr_location location;
  sr_location_init(&location);
  location.line = 2;
  location.column = 10;
  check(c, &frame, c + strlen(c), &location);

  c = "#1  0x000000322160e7fd in fsync () at ../sysdeps/unix/syscall-template.S:82\n"
      "No locals.\n"
      "#2  0x003f4f3f in IA__g_main_loop_run (loop=0x90e2c50) at gmain.c:2799\n"
      "        self = 0x8b80038\n"
      "  __PRETTY_FUNCTION__ = \"IA__g_main_loop_run\"\n";
  location.line = 3;
  location.column = 0;
  check(c, &frame, strstr(c, "#2"), &location);
  return 0;
}
]])
