# Checking the satyr. -*- Autotest -*-

AT_BANNER([Core frames])

## ----------------- ##
## sr_core_frame_dup ##
## ----------------- ##

AT_TESTFUN([sr_core_frame_dup],
[[
#include "core/frame.h"
#include "utils.h"
#include <assert.h>

int
main(void)
{
  struct sr_core_frame *frame1 = sr_core_frame_new();;
  frame1->address = 0xffffffff1;
  frame1->build_id = sr_strdup("aabbccddeeff1");
  frame1->build_id_offset = 2561;
  frame1->function_name = sr_strdup("test1");
  frame1->file_name = sr_strdup("executable1");
  frame1->fingerprint = sr_strdup("ab");

  struct sr_core_frame *frame0 = sr_core_frame_new();;
  frame0->address = 0xffffffff0;
  frame0->build_id = sr_strdup("aabbccddeeff0");
  frame0->build_id_offset = 2560;
  frame0->function_name = sr_strdup("test0");
  frame0->file_name = sr_strdup("executable0");
  frame0->fingerprint = sr_strdup("ab");
  frame0->next = frame1;

  /* Test the duplication without siblings. */
  struct sr_core_frame *frame = sr_core_frame_dup(frame0, false);
  assert(NULL == frame->next);
  assert(frame->build_id != frame0->build_id);
  assert(frame->function_name != frame0->function_name);
  assert(frame->file_name != frame0->file_name);
  assert(0 == sr_core_frame_cmp(frame, frame0));
  sr_core_frame_free(frame);

  /* Test the duplication with the siblings. */
  frame = sr_core_frame_dup(frame0, true);
  assert(frame->build_id != frame0->build_id);
  assert(frame->function_name != frame0->function_name);
  assert(frame->file_name != frame0->file_name);
  assert(0 == sr_core_frame_cmp(frame, frame0));
  assert(frame->next != frame1);
  assert(0 == sr_core_frame_cmp(frame->next, frame1));
  sr_core_frame_free(frame->next);
  sr_core_frame_free(frame);

  sr_core_frame_free(frame1);
  sr_core_frame_free(frame0);
  return 0;
}
]])

## ---------------------- ##
## sr_core_frame_to_json ##
## ---------------------- ##

AT_TESTFUN([sr_core_frame_to_json],
[[
#include "core/frame.h"
#include "utils.h"
#include <assert.h>

int
main(void)
{
  struct sr_core_frame *frame = sr_core_frame_new();;
  frame->address = 0xffffffff1;
  frame->build_id = sr_strdup("aabbccddeeff1");
  frame->build_id_offset = 2561;
  frame->function_name = sr_strdup("test1");
  frame->file_name = sr_strdup("executable1");
  frame->fingerprint = sr_strdup("ab");

  char *json = sr_core_frame_to_json(frame);
  assert(0 == strcmp(json,
           "{   \"address\": 68719476721\n"
           ",   \"build_id\": \"aabbccddeeff1\"\n"
           ",   \"build_id_offset\": 2561\n"
           ",   \"function_name\": \"test1\"\n"
           ",   \"file_name\": \"executable1\"\n"
           ",   \"fingerprint\": \"ab\"\n"
           "}"));

  sr_core_frame_free(frame);
  return 0;
}
]])

## -------------------------------- ##
## sr_core_frame_abstract_functions ##
## -------------------------------- ##

AT_TESTFUN([sr_core_frame_abstract_functions],
[[
#include "core/frame.h"
#include "strbuf.h"
#include "frame.h"
#include <assert.h>

int
main(void)
{
  struct sr_core_frame *frame = sr_core_frame_new();;
  frame->address = 0xffffffff1;
  frame->build_id = sr_strdup("aabbccddeeff1");
  frame->build_id_offset = 2561;
  frame->function_name = sr_strdup("test1");
  frame->file_name = sr_strdup("executable1");
  frame->fingerprint = sr_strdup("ab");
  frame->next = 0xdeadbeef;

  assert(sr_frame_next((struct sr_frame*)frame) == (void*)0xdeadbeef);

  struct sr_strbuf *strbuf = sr_strbuf_new();
  sr_frame_append_to_str((struct sr_frame*)frame, strbuf);
  char *res = sr_strbuf_free_nobuf(strbuf);

  assert(0 == strcmp(res, "[executable1] test1"));
  free(res);

  return 0;
}
]])
