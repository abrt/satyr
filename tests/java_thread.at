# Checking the satyr. -*- Autotest -*-

AT_BANNER([Java threads])

## ------------------ ##
## sr_java_thread_cmp ##
## ------------------ ##
AT_TESTFUN([sr_java_thread_cmp],
[[
#include "java/thread.h"
#include "java/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_thread *thread0 = create_real_main_thread_objects();
  struct sr_java_thread *thread1 = create_real_main_thread_objects();

  assert(0 == sr_java_thread_cmp(thread0, thread1));
  assert(0 == sr_thread_cmp(thread0, thread1));

  sr_java_frame_free_full(thread1->frames);
  thread1->frames = NULL;

  assert(0 != sr_java_thread_cmp(thread0, thread1));
  assert(0 != sr_thread_cmp(thread0, thread1));

  sr_java_thread_free(thread1);

  thread1 = create_real_main_thread_objects();
  free(thread1->name);
  thread1->name = g_strdup("worker");

  assert(0 != sr_java_thread_cmp(thread0, thread1));
  assert(0 != sr_thread_cmp(thread0, thread1));

  sr_java_thread_free(thread0);
  sr_java_thread_free(thread1);

  return 0;
}
]])

## ------------------ ##
## sr_java_thread_dup ##
## ------------------ ##
AT_TESTFUN([sr_java_thread_dup],
[[
#include "java/thread.h"
#include "java/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_thread *thread0 = create_real_main_thread_objects();
  struct sr_java_thread *thread1 = sr_java_thread_dup(thread0, false);

  assert(0 == sr_java_thread_cmp(thread0, thread1));

  sr_java_thread_free(thread0);
  sr_java_thread_free(thread1);

  return 0;
}
]])

## --------------------------- ##
## sr_java_thread_remove_frame ##
## --------------------------- ##
AT_TESTFUN([sr_java_thread_remove_frame],
[[
#include "java/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_thread thread;
  sr_java_thread_init(&thread);

  struct sr_java_frame *exception2 = create_real_stacktrace_objects();
  thread.frames = exception2;

  struct sr_java_frame *removed = exception2;

  assert(sr_java_thread_remove_frame(&thread, removed) || !"Remove the top of stack");
  assert(removed != thread.frames);

  removed = sr_java_frame_get_last(thread.frames);

  assert(sr_java_thread_remove_frame(&thread, removed) || !"Remove the bottom of stack");
  assert(removed != sr_java_frame_get_last(thread.frames));

  removed = thread.frames->next;

  assert(sr_java_thread_remove_frame(&thread, removed) || !"Remove the middle of stack");
  assert(removed != thread.frames->next);

  assert(0 == sr_java_thread_remove_frame(&thread, removed) || !"Remove a nonexisting frame");

  sr_java_frame_free_full(thread.frames);

  return 0;
}
]])

## ---------------------------------- ##
## sr_java_thread_remove_frames_above ##
## ---------------------------------- ##
AT_TESTFUN([sr_java_thread_remove_frames_above],
[[
#include "java/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_thread thread;
  sr_java_thread_init(&thread);

  struct sr_java_frame *exception2 = create_real_stacktrace_objects();
  thread.frames = exception2;

  struct sr_java_frame *top = exception2;

  assert(sr_java_thread_remove_frames_above(&thread, top) || !"Remove above the top of stack");
  assert(top == thread.frames);

  top = thread.frames->next;

  assert(sr_java_thread_remove_frames_above(&thread, top) || !"Remove above the middle of stack");
  assert(top == thread.frames);

  struct sr_java_frame *above = thread.frames;
  top = sr_java_frame_get_last(thread.frames);

  assert(sr_java_thread_remove_frames_above(&thread, top) || !"Remove above the bottom of stack");
  assert(top == thread.frames);

  assert(0 == sr_java_thread_remove_frames_above(&thread, above) || !"Remove above a nonexisting frame");

  sr_java_frame_free_full(thread.frames);

  return 0;
}
]])

## ------------------------------------ ##
## sr_java_thread_remove_frames_below_n ##
## ------------------------------------ ##
AT_TESTFUN([sr_java_thread_remove_frames_below_n],
[[
#include "java/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_thread thread;
  sr_java_thread_init(&thread);

  struct sr_java_frame *exception2 = create_real_stacktrace_objects();
  thread.frames = exception2;

  struct sr_java_frame *bottom = sr_java_frame_get_last(thread.frames);

  /* Remove below too large */
  sr_java_thread_remove_frames_below_n(&thread, 100);
  assert(bottom != thread.frames);
  assert(bottom == sr_java_frame_get_last(thread.frames));

  bottom = thread.frames->next;

  /* Remove below the second frame */
  sr_java_thread_remove_frames_below_n(&thread, 2);
  assert(thread.frames);
  assert(bottom == thread.frames->next);
  assert(NULL == thread.frames->next->next);

  /* Remove below 'over the top' frame */
  sr_java_thread_remove_frames_below_n(&thread, 0);
  assert(NULL == thread.frames);

  sr_java_frame_free_full(thread.frames);

  return 0;
}
]])


## -------------------- ##
## sr_java_thread_parse ##
## -------------------- ##
AT_TESTFUN([sr_java_thread_parse],
[[
#include "java/thread.h"
#include "java/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

static void
check(const char *input,
      struct sr_java_thread *expected_thread)
{
  printf("================================================================================\n"
         "Testing input:\n%s", input);

  const char *old_input = input;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_java_thread *thread = sr_java_thread_parse((const char **)&input, &location);
  assert(!expected_thread || thread);
  if (thread)
  {
    GString *output = g_string_new(NULL);
    sr_java_thread_append_to_str(thread, output);
    printf("--------------------------------------------------------------------------------\n"
         "Parsed :\n%s", output->str);

    g_string_free(output, TRUE);

    assert(*input == '\0');
    assert(0 == sr_java_thread_cmp(thread, expected_thread));
    sr_java_thread_free(thread);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
    assert(!expected_thread);
  }
  printf("================================================================================\n");
}

int
main(void)
{
  struct sr_java_thread *thread = create_real_main_thread_objects();

  struct sr_location location;
  sr_location_init(&location);

  check(get_real_thread_stacktrace() , thread);

  return 0;
}
]])
