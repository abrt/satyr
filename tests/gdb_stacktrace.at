# Checking the satyr. -*- Autotest -*-

AT_BANNER([GDB stacktraces])

## ------------------------------------------- ##
## sr_gdb_stacktrace_remove_threads_except_one ##
## ------------------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_remove_threads_except_one],
[[
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  /* Delete the thread except the middle one. */
  struct sr_gdb_thread *thread2 = sr_gdb_thread_new();
  struct sr_gdb_thread *thread1 = sr_gdb_thread_new();
  thread1->next = thread2;
  struct sr_gdb_thread *thread0 = sr_gdb_thread_new();
  thread0->next = thread1;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_new();
  stacktrace->threads = thread0;
  sr_gdb_stacktrace_remove_threads_except_one(stacktrace, thread1);
  assert(stacktrace->threads == thread1);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except one when there is only one. */
  sr_gdb_stacktrace_remove_threads_except_one(stacktrace, thread1);
  assert(stacktrace->threads == thread1);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except the first one. */
  thread0 = sr_gdb_thread_new();
  stacktrace->threads = thread0;
  thread0->next = thread1; // already exists
  thread2 = sr_gdb_thread_new();
  thread1->next = thread2;
  sr_gdb_stacktrace_remove_threads_except_one(stacktrace, thread0);
  assert(stacktrace->threads == thread0);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except the last one. */
  thread1 = sr_gdb_thread_new();
  thread0->next = thread1;
  thread2 = sr_gdb_thread_new();
  thread1->next = thread2;
  sr_gdb_stacktrace_remove_threads_except_one(stacktrace, thread2);
  assert(stacktrace->threads == thread2);
  assert(NULL == stacktrace->threads->next);

  sr_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## ----------------------------------- ##
## sr_gdb_stacktrace_find_crash_thread ##
## ----------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_find_crash_thread],
[
#include "stacktrace.h"
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include "gdb/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <string.h>

void
check(const char *path, const char *first_thread_function_name)
{
  /* Load the stacktrace from a file. */
  struct sr_location location;
  sr_location_init(&location);
  char *error_message;
  char *full_input = sr_file_to_string(path, &error_message);
  assert(full_input);
  char *input = full_input;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);

  /* Check that the crash thread is found. */
  struct sr_gdb_thread *crash_thread = sr_gdb_stacktrace_find_crash_thread(stacktrace);
  assert(crash_thread);
  assert(0 == strcmp(crash_thread->frames->function_name, first_thread_function_name));

  struct sr_gdb_thread *crash_thread2 = sr_stacktrace_find_crash_thread(stacktrace);
  assert(crash_thread2);
  assert(crash_thread == crash_thread2);

  sr_gdb_stacktrace_free(stacktrace);
  free(full_input);
}

int
main(void)
{
  /* Test the stacktrace from Red Hat Bugzilla bug #621492. */
  check("../../gdb_stacktraces/rhbz-621492", "raise");
  /* Test the stacktrace from Red Hat Bugzilla bug #803600. */
  check("../../gdb_stacktraces/rhbz-803600", "validate_row");
  return 0;
}
])

## ----------------------------------- ##
## sr_gdb_stacktrace_limit_frame_depth ##
## ----------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_limit_frame_depth],
[[
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include "location.h"
#include "utils.h"
#include "thread.h"
#include <assert.h>

int
main(void)
{
  /* Load the stacktrace from Red Hat Bugzilla bug #621492. */
  struct sr_location location;
  sr_location_init(&location);
  char *error_message;
  char *full_input = sr_file_to_string("../../gdb_stacktraces/rhbz-621492", &error_message);
  assert(full_input);
  char *input = full_input;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);

  /* Check the frame depth limit. */
  sr_gdb_stacktrace_limit_frame_depth(stacktrace, 5);
  assert(11 == sr_gdb_stacktrace_get_thread_count(stacktrace));
  struct sr_gdb_thread *thread = stacktrace->threads;
  while (thread)
  {
    assert(5 == sr_thread_frame_count((struct sr_thread*) thread));
    thread = thread->next;
  }

  sr_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## --------------------------------- ##
## sr_gdb_stacktrace_quality_complex ##
## --------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_quality_complex],
[[
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include "location.h"
#include "utils.h"
#include <assert.h>

int
main(void)
{
  /* Load the stacktrace from Red Hat Bugzilla bug #621492. */
  struct sr_location location;
  sr_location_init(&location);
  char *error_message;
  char *full_input = sr_file_to_string("../../gdb_stacktraces/rhbz-621492", &error_message);
  assert(full_input);
  char *input = full_input;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);
  assert(1.0f == sr_gdb_stacktrace_quality_complex(stacktrace));
  sr_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## --------------------------------- ##
## sr_gdb_stacktrace_get_crash_frame ##
## --------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_get_crash_frame],
[[
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include "gdb/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <stdio.h>

int
main(void)
{
  /* Check the crash frame of stacktrace from Red Hat Bugzilla bug #803600. */
  struct sr_location location;
  sr_location_init(&location);
  char *error_message;
  char *full_input = sr_file_to_string("../../gdb_stacktraces/rhbz-803600", &error_message);
  assert(full_input);
  char *input = full_input;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);
  struct sr_gdb_frame *crash_frame = sr_gdb_stacktrace_get_crash_frame(stacktrace);
  puts(crash_frame->function_name);
  assert(0 == strcmp(crash_frame->function_name, "validate_row"));
  sr_gdb_frame_free(crash_frame);
  sr_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## ----------------------------------------- ##
## sr_gdb_stacktrace_parse_no_thread_header  ##
## ----------------------------------------- ##
AT_TESTFUN([sr_gdb_stacktrace_parse_no_thread_header],
[[
#include "gdb/stacktrace.h"
#include "gdb/thread.h"
#include "gdb/frame.h"
#include "location.h"
#include "utils.h"
#include <assert.h>
#include <stdio.h>

int
main(void)
{
  /* Check that satyr is able to parse backtrace with missing Thread header */
  struct sr_location location;
  sr_location_init(&location);
  char *error_message;
  char *full_input = sr_file_to_string("../../gdb_stacktraces/no-thread-header", &error_message);
  assert(full_input);
  char *input = full_input;
  struct sr_gdb_stacktrace *stacktrace = sr_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);
  assert(1 == sr_gdb_stacktrace_get_thread_count(stacktrace));
  struct sr_gdb_thread *crash_thread = sr_gdb_stacktrace_find_crash_thread(stacktrace);
  assert(6 == sr_thread_frame_count(crash_thread));
  assert(0 == crash_thread->number);
  struct sr_gdb_frame *crash_frame = sr_gdb_stacktrace_get_crash_frame(stacktrace);
  puts(crash_frame->function_name);
  assert(0 == strcmp(crash_frame->function_name, "write"));
  sr_gdb_frame_free(crash_frame);
  sr_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])
