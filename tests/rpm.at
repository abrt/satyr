# Checking the satyr. -*- Autotest -*-

AT_BANNER([RPM])

## ------------------------- ##
## sr_rpm_package_parse_nvr  ##
## ------------------------- ##
AT_TESTFUN([sr_rpm_package_parse_nvr],
[[
#include "rpm.h"
#include <assert.h>

int
main(void)
{
  char *name, *version, *release;
  bool success = sr_rpm_package_parse_nvr("coreutils-8.4-19.el6",
                                          &name,
                                          &version,
                                          &release);

  assert(success);
  assert(0 == strcmp(name, "coreutils"));
  assert(0 == strcmp(version, "8.4"));
  assert(0 == strcmp(release, "19.el6"));
  return 0;
}
]])

## --------------------------- ##
## sr_rpm_package_parse_nevra  ##
## --------------------------- ##
AT_TESTFUN([sr_rpm_package_parse_nevra],
[[
#include "rpm.h"
#include <assert.h>
#include <stdint.h>

static void
check(char *input,
      bool expected_success,
      char *expected_name,
      uint32_t expected_epoch,
      char *expected_version,
      char *expected_release,
      char *expected_architecture)
{
  char *name, *version, *release, *architecture;
  uint32_t epoch;
  bool success = sr_rpm_package_parse_nevra(input,
                                            &name,
                                            &epoch,
                                            &version,
                                            &release,
                                            &architecture);

  assert(success == expected_success);
  if (success)
  {
    assert(0 == strcmp(name, expected_name));
    assert(epoch == expected_epoch);
    assert(0 == strcmp(version, expected_version));
    assert(0 == strcmp(release, expected_release));
    assert(0 == strcmp(architecture, expected_architecture));
  }
}

int
main(void)
{
  check("glibc-2.12-1.80.el6_3.5.x86_64",
        true,
        "glibc",
        0,
        "2.12",
        "1.80.el6_3.5",
        "x86_64");

  return 0;
}
]])

## ------------------- ##
## sr_rpm_package_uniq ##
## ------------------- ##
AT_TESTFUN([sr_rpm_package_uniq],
[[
#include "rpm.h"
#include "utils.h"
#include <assert.h>
#include <stdint.h>

int
main(void)
{
  struct sr_rpm_package *p1 = sr_rpm_package_new();
  struct sr_rpm_package *p2 = sr_rpm_package_new();
  struct sr_rpm_package *p3 = sr_rpm_package_new();

  p1->name = g_strdup("coreutils");
  p1->version = g_strdup("8.15");
  p1->release = g_strdup("10.fc17");
  p1->role = SR_ROLE_AFFECTED;
  p1->next = p2;

  p2->name = g_strdup("coreutils");
  p2->version = g_strdup("8.15");
  p2->release = g_strdup("10.fc17");
  p2->architecture = g_strdup("x86_64");
  p2->install_time = 1363628422;
  p2->next = p3;

  p3->name = g_strdup("glibc");
  p3->version = g_strdup("2.15");
  p3->release = g_strdup("58.fc17");
  p3->architecture = g_strdup("x86_64");
  p3->install_time = 1363628422;

  struct sr_rpm_package *packages = p1;
  packages = sr_rpm_package_uniq(packages);

  assert(0 == strcmp(packages->name, "coreutils") &&
         0 == strcmp(packages->version, "8.15") &&
         0 == strcmp(packages->release, "10.fc17") &&
         0 == strcmp(packages->architecture, "x86_64") &&
         packages->install_time == 1363628422 &&
         packages->role == SR_ROLE_AFFECTED);

  assert(0 == strcmp(packages->next->name, "glibc") &&
         0 == strcmp(packages->next->version, "2.15") &&
         0 == strcmp(packages->next->release, "58.fc17") &&
         0 == strcmp(packages->next->architecture, "x86_64") &&
         packages->next->install_time == 1363628422 &&
         packages->next->role == SR_ROLE_UNKNOWN);

  assert(packages->next->next == NULL);

  sr_rpm_package_free(packages, true);


  p1 = sr_rpm_package_new();
  p2 = sr_rpm_package_new();
  p3 = sr_rpm_package_new();

  p1->name = g_strdup("glibc");
  p1->version = g_strdup("2.15");
  p1->release = g_strdup("58.fc17");
  p1->architecture = g_strdup("x86_64");
  p1->install_time = 1363628422;
  p1->next = p2;

  p2->name = g_strdup("coreutils");
  p2->version = g_strdup("8.15");
  p2->release = g_strdup("10.fc17");
  p2->next = p3;

  p3->name = g_strdup("coreutils");
  p3->version = g_strdup("8.15");
  p3->release = g_strdup("10.fc17");
  p3->architecture = g_strdup("x86_64");
  p3->install_time = 1363628422;
  p3->role = SR_ROLE_AFFECTED;

  packages = p1;
  packages = sr_rpm_package_uniq(packages);

  assert(0 == strcmp(packages->name, "glibc") &&
         0 == strcmp(packages->version, "2.15") &&
         0 == strcmp(packages->release, "58.fc17") &&
         0 == strcmp(packages->architecture, "x86_64") &&
         packages->install_time == 1363628422 &&
         packages->role == SR_ROLE_UNKNOWN);

  assert(0 == strcmp(packages->next->name, "coreutils") &&
         0 == strcmp(packages->next->version, "8.15") &&
         0 == strcmp(packages->next->release, "10.fc17") &&
         0 == strcmp(packages->next->architecture, "x86_64") &&
         packages->next->install_time == 1363628422 &&
         packages->next->role == SR_ROLE_AFFECTED);

  assert(packages->next->next == NULL);

  return 0;
}
]])

## -------------------- ##
## sr_rpm_package_uniq3 ##
## -------------------- ##
AT_TESTFUN([sr_rpm_package_uniq3],
[[
#include "rpm.h"
#include "utils.h"
#include <assert.h>
#include <stdint.h>

int
main(void)
{
  struct sr_rpm_package *p1 = sr_rpm_package_new();
  struct sr_rpm_package *p2 = sr_rpm_package_new();
  struct sr_rpm_package *p3 = sr_rpm_package_new();

  p1->name = g_strdup("pango");
  p1->version = g_strdup("1.32.3");
  p1->release = g_strdup("1.fc18");
  p1->architecture = g_strdup("x86_64");
  p2->install_time = 1363628422;
  p1->next = p2;

  p2->name = g_strdup("pango");
  p2->version = g_strdup("1.32.3");
  p2->release = g_strdup("1.fc18");
  p2->architecture = g_strdup("x86_64");
  p2->install_time = 1363628422;
  p2->next = p3;

  p3->name = g_strdup("pango");
  p3->version = g_strdup("1.32.3");
  p3->release = g_strdup("1.fc18");
  p3->architecture = g_strdup("x86_64");
  p3->install_time = 1363628422;

  struct sr_rpm_package *packages = p1;
  packages = sr_rpm_package_uniq(packages);

  assert(packages);
  assert(!packages->next);

  return 0;
}
]])
