# Checking the satyr. -*- Autotest -*-

AT_BANNER([Core threads])

## ---------------------- ##
## sr_core_thread_to_json ##
## ---------------------- ##

AT_TESTFUN([sr_core_thread_to_json],
[[
#include "core/thread.h"
#include "core/frame.h"
#include "utils.h"
#include <assert.h>

int
main(void)
{
  struct sr_core_frame *frame1 = sr_core_frame_new();
  frame1->address = 0xffffffff0;
  frame1->build_id = g_strdup("aabbccddeeff0");
  frame1->build_id_offset = 2560;
  frame1->function_name = g_strdup("test0");
  frame1->file_name = g_strdup("executable0");

  struct sr_core_frame *frame0 = sr_core_frame_new();;
  frame0->address = 0xffffffff1;
  frame0->build_id = g_strdup("aabbccddeeff1");
  frame0->build_id_offset = 2561;
  frame0->function_name = g_strdup("test1");
  frame0->file_name = g_strdup("executable1");
  frame0->fingerprint = g_strdup("ab");
  frame0->next = frame1;

  struct sr_core_thread *thread = sr_core_thread_new();
  thread->frames = frame0;

  char *json = sr_core_thread_to_json(thread, false);
  puts(json);
  assert(0 == strcmp(json,
           "{   \"frames\":\n"
           "      [ {   \"address\": 68719476721\n"
           "        ,   \"build_id\": \"aabbccddeeff1\"\n"
           "        ,   \"build_id_offset\": 2561\n"
           "        ,   \"function_name\": \"test1\"\n"
           "        ,   \"file_name\": \"executable1\"\n"
           "        ,   \"fingerprint\": \"ab\"\n"
           "        }\n"
           "      , {   \"address\": 68719476720\n"
           "        ,   \"build_id\": \"aabbccddeeff0\"\n"
           "        ,   \"build_id_offset\": 2560\n"
           "        ,   \"function_name\": \"test0\"\n"
           "        ,   \"file_name\": \"executable0\"\n"
           "        } ]\n"
           "}"));

  free(json);
  sr_core_thread_free(thread);
  return 0;
}
]])

## --------------------------------- ##
## sr_core_thread_abstract_functions ##
## --------------------------------- ##

AT_TESTFUN([sr_core_thread_abstract_functions],
[[
#include "core/thread.h"
#include "core/frame.h"
#include "utils.h"
#include "thread.h"
#include <assert.h>

int
main(void)
{
  struct sr_core_frame *frame1 = sr_core_frame_new();
  frame1->address = 0xffffffff0;
  frame1->build_id = g_strdup("aabbccddeeff0");
  frame1->build_id_offset = 2560;
  frame1->function_name = g_strdup("test0");
  frame1->file_name = g_strdup("executable0");

  struct sr_core_frame *frame0 = sr_core_frame_new();;
  frame0->address = 0xffffffff1;
  frame0->build_id = g_strdup("aabbccddeeff1");
  frame0->build_id_offset = 2561;
  frame0->function_name = g_strdup("test1");
  frame0->file_name = g_strdup("executable1");
  frame0->fingerprint = g_strdup("ab");
  frame0->next = frame1;

  struct sr_core_thread *thread = sr_core_thread_new();
  thread->frames = frame0;

  assert(sr_thread_frames((struct sr_thread*) thread) == thread->frames);
  assert(sr_thread_next((struct sr_thread*) thread) == thread->next);
  assert(sr_thread_frame_count((struct sr_thread*) thread) == 2);

  return 0;
}
]])
