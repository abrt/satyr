# Checking the satyr. -*- Autotest -*-

AT_BANNER([Normalization])

m4_define([UTILS],
[#include <stdarg.h>
#include "gdb/thread.h"
#include "gdb/frame.h"
#include "utils.h"
#include "normalize.h"
#include <stdlib.h>
#include <assert.h>

static struct sr_gdb_thread *
create_thread(int count, ...)
{
  struct sr_gdb_thread *thread = sr_gdb_thread_new();
  if (count == 0)
     return thread;

  int i;
  va_list argp;
  va_start(argp, count);

  for (i=0; i < count; i++)
  {
    const char *fname = va_arg(argp, const char*);
    struct sr_gdb_frame *frame = sr_gdb_frame_new();
    frame->function_name = g_strdup(fname);
    frame->source_file = g_strdup("");

    if (!thread->frames)
      thread->frames = frame;
    else
      sr_gdb_frame_append(thread->frames, frame);
  }

  va_end(argp);
  return thread;
}
])

## --------------------------------------- ##
## sr_normalize_gdb_thread_removes_zeroes  ##
## --------------------------------------- ##
# Checks that sr_gdb_normalize_thread removes the first and the last
# frame if they have address 0x0000 and function ??.
AT_TESTFUN([sr_normalize_gdb_thread_removes_zeroes],
[[
#include "normalize.h"
#include "gdb/frame.h"
#include "gdb/thread.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  struct sr_gdb_frame *frame2 = sr_gdb_frame_new();
  frame2->function_name = g_strdup("??");
  frame2->number = 2;
  frame2->address = 0x0000;

  struct sr_gdb_frame *frame1 = sr_gdb_frame_new();
  frame1->function_name = g_strdup("write_to_temp_file");
  frame1->number = 1;
  frame1->source_file = g_strdup("gfileutils.c");
  frame1->source_line = 980;
  frame1->address = 0x322160e7fdULL;
  frame1->next = frame2;

  struct sr_gdb_frame *frame0 = sr_gdb_frame_new();
  frame0->function_name = g_strdup("??");
  frame0->number = 0;
  frame0->address = 0x0000;
  frame0->next = frame1;

  struct sr_gdb_thread thread;
  sr_gdb_thread_init(&thread);
  thread.number = 0;
  thread.frames = frame0;

  sr_normalize_gdb_thread(&thread);
  assert(thread.frames == frame1);
  assert(thread.frames->next == NULL);

  sr_gdb_frame_free(frame1);
  return 0;
}
]])

AT_TESTFUN([sr_normalize_gdb_thread],
[
UTILS

int
main()
{
  struct sr_gdb_thread *threads[[3]];
  struct sr_gdb_frame *frame;
  threads[[0]] = create_thread(5, "aa", "abort", "raise", "__assert_fail_base", "ee");
  
  threads[[1]] = create_thread(5, "aa", "abort", "bb", "cc", "dd");
  threads[[1]]->frames->next->source_file = g_strdup("abort.c");
  
  threads[[2]] = create_thread(5, "aa", "abort", "raise", "dd", "ee");
  threads[[2]]->frames->next->source_file = g_strdup("abort.c");
  threads[[2]]->frames->next->next->source_file = g_strdup("libc.so");

  sr_normalize_gdb_thread(threads[[0]]);
  assert(0 == strcmp(threads[[0]]->frames->function_name, "ee"));

  sr_normalize_gdb_thread(threads[[1]]);
  assert(0 == strcmp(threads[[1]]->frames->function_name, "bb"));

  sr_normalize_gdb_thread(threads[[2]]);
  assert(0 == strcmp(threads[[2]]->frames->function_name, "dd"));
  
  return 0;
}
])


AT_TESTFUN([sr_normalize_gdb_paired_unknown_function_names],
[
UTILS

int
main()
{
  struct sr_gdb_thread *threads[[6]];
  struct sr_gdb_frame *frame;
  threads[[0]] = create_thread(5, "aa", "??", "??", "??", "??");
  threads[[1]] = create_thread(5, "bb", "aa", "??", "??", "??");
  threads[[2]] = create_thread(5, "aa", "??", "??", "??", "??");
  threads[[3]] = create_thread(5, "bb", "aa", "??", "??", "??");

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[5]], threads[[4]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "??", "cc", "cc", "??");
  threads[[1]] = create_thread(5, "bb", "aa", "??", "cc", "??");
  threads[[2]] = create_thread(5, "aa", "__unknown_function_0", "cc", "cc", "__unknown_function_1");
  threads[[3]] = create_thread(5, "bb", "aa","__unknown_function_0", "cc", "__unknown_function_1");

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "??", "cc", "??", "dd");
  threads[[1]] = create_thread(5, "bb", "??", "cc", "??", "dd");
  threads[[2]] = create_thread(5, "aa", "??", "cc", "__unknown_function_0", "dd");
  threads[[3]] = create_thread(5, "bb", "??", "cc", "__unknown_function_0", "dd");

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "cc", "??", "??", "??");
  threads[[1]] = create_thread(5, "bb", "??", "??", "??", "??");
  threads[[2]] = create_thread(5, "aa", "cc", "??", "??", "??");
  threads[[3]] = create_thread(5, "bb", "??", "??", "??", "??");

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  threads[[4]] = sr_gdb_thread_dup(threads[[0]], false);
  threads[[5]] = sr_gdb_thread_dup(threads[[1]], false);
  sr_normalize_gdb_paired_unknown_function_names(threads[[5]], threads[[4]]);
  assert(!sr_gdb_thread_cmp(threads[[2]], threads[[4]]));
  assert(!sr_gdb_thread_cmp(threads[[3]], threads[[5]]));

  return 0;
}
])


## ---------------------------------- ##
## sr_normalize_gdb_thread_jvm_frames ##
## ---------------------------------- ##
# Checks that sr_gdb_normalize_thread removes removable JVM frames
AT_TESTFUN([sr_normalize_gdb_thread_jvm_frames],
[[
#include "normalize.h"
#include "gdb/frame.h"
#include "gdb/thread.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  struct sr_gdb_frame *frame3 = sr_gdb_frame_new();
  frame3->function_name = g_strdup("jthread_map_push");
  frame3->number = 3;
  frame3->source_file = g_strdup("jthread_map.c");
  frame3->source_line = 110;
  frame3->address = 0x7fda9a03f920ULL;
  frame3->next = NULL;

  struct sr_gdb_frame *frame2 = sr_gdb_frame_new();
  frame2->function_name = g_strdup("JVM_handle_linux_signal");
  frame2->number = 2;
  frame2->source_file = g_strdup("os_linux_x86.cpp");
  frame2->source_line = 531;
  frame2->address = 0x7fda9af3106fULL;
  frame2->next = frame3;

  struct sr_gdb_frame *frame1 = sr_gdb_frame_new();
  frame1->function_name = g_strdup("VMError::report_and_die");
  frame1->number = 1;
  frame1->source_file = g_strdup("vmError.cpp");
  frame1->source_line = 1053;
  frame1->address = 0x7fda9b0a83efULL;
  frame1->next = frame2;

  struct sr_gdb_frame *frame0 = sr_gdb_frame_new();
  frame0->function_name = g_strdup("os::abort");
  frame0->number = 0;
  frame0->source_file = g_strdup("os_linux.cpp");
  frame0->source_line = 1594;
  frame0->address = 0x7fda9af29259ULL;
  frame0->next = frame1;

  struct sr_gdb_thread thread;
  sr_gdb_thread_init(&thread);
  thread.number = 0;
  thread.frames = frame0;

  sr_normalize_gdb_thread(&thread);
  sr_normalize_gdb_thread(&thread);
  assert(thread.frames != frame0);
  assert(thread.frames != frame1);
  assert(thread.frames != frame2);
  assert(thread.frames == frame3);
  assert(thread.frames->next == NULL);

  sr_gdb_frame_free(frame3);
  return 0;
}
]])

