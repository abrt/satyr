# Checking the satyr. -*- Autotest -*-

AT_BANNER([Report])

## ------------------------ ##
## sr_report_type_to_string ##
## ------------------------ ##

AT_TESTFUN([sr_report_type_to_string],
[[
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include "report_type.h"
#include "utils.h"

void check(enum sr_report_type type, const char *str)
{
  const char *ret_str = sr_report_type_to_string(type);
  printf("sr_report_type_to_string(%d) -> %s == %s)\n", type, ret_str, str);
  assert(0 == g_strcmp0(sr_report_type_to_string(type), str));
}

int main(void)
{
  check(SR_REPORT_INVALID, "invalid");
  check(SR_REPORT_CORE, "core");
  check(SR_REPORT_KERNELOOPS, "kerneloops");
  check(SR_REPORT_GDB, "gdb");
  check(SR_REPORT_RUBY, "ruby");
  check(SR_REPORT_JAVASCRIPT, "javascript");
  check(SR_REPORT_NUM, "invalid");
  check(5000, "invalid");
  check(-42, "invalid");

  return 0;
}
]])

## -------------------------- ##
## sr_report_type_from_string ##
## -------------------------- ##

AT_TESTFUN([sr_report_type_from_string],
[[
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include "report_type.h"

void check(enum sr_report_type type, char *str)
{
  const enum sr_report_type ret_type = sr_report_type_from_string(str);
  printf("sr_report_type_from_string(%s) -> %d == %d)\n", str, ret_type, type);
  assert(sr_report_type_from_string(str) == type);
}

int main(void)
{
  check(SR_REPORT_INVALID, "invalid");
  check(SR_REPORT_CORE, "core");
  check(SR_REPORT_PYTHON, "python");
  check(SR_REPORT_GDB, "gdb");
  check(SR_REPORT_RUBY, "ruby");
  check(SR_REPORT_JAVASCRIPT, "javascript");
  check(SR_REPORT_INVALID, NULL);
  check(SR_REPORT_INVALID, "visual basic");

  return 0;
}
]])

## ------------------ ##
## sr_report_add_auth ##
## ------------------ ##

AT_TESTFUN([sr_report_add_auth],
[[
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "report.h"

void check_struct(struct sr_report *report, const char **expected)
{
    const char **exp_iter = expected;
    struct sr_report_custom_entry *cust_iter = report->auth_entries;

    while(cust_iter && *exp_iter)
    {
        fprintf(stdout, "Expected('%s':'%s') vs. Current('%s':'%s')\n",
            exp_iter[0], exp_iter[1], cust_iter->key, cust_iter->value);

        assert(strcmp(cust_iter->key, exp_iter[0]) == 0 &&
               strcmp(cust_iter->value, exp_iter[1]) == 0);

        cust_iter = cust_iter->next;
        exp_iter += 2;
    }

    assert(cust_iter == NULL);
    assert(*exp_iter == NULL);
}

void check_json(const char *json, const char **expected)
{
    const char **exp_iter = expected;
    while (*exp_iter)
    {
        char *entry = NULL;
        asprintf(&entry, "\"%s\": \"%s\"", exp_iter[0], exp_iter[1]);

        fprintf(stdout, "Checking: '%s'\n", entry);

        if (strstr(json, entry) == NULL)
        {
            fprintf(stderr, "JSON:\n%s\n", json);
            abort();
        }

        exp_iter += 2;
    }
}


int main(void)
{
  struct sr_report *report = sr_report_new();

  sr_report_add_auth(report, "foo", "blah");
  sr_report_add_auth(report, "abrt", "awesome");
  sr_report_add_auth(report, "satyr", "wonderful");

  const char *expected[] = { "satyr", "wonderful", "abrt", "awesome", "foo", "blah", NULL };

  check_struct(report, expected);

  sr_report_to_json(report);

  char *json = sr_report_to_json(report);

  check_json(json, expected);

  char *error = NULL;
  struct sr_report *copy = sr_report_from_json_text(json, &error);

  check_struct(copy, expected);

  return 0;
}
]])

## ----------------------- ##
## sr_abrt_report_from_dir ##
## ----------------------- ##

AT_TESTFUN([sr_abrt_report_from_dir],
[[

#include <assert.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include "abrt.h"
#include "report.h"
#include "report_type.h"
#include "operating_system.h"
#include "rpm.h"
#include "utils.h"

int main(void)
{
    char *error_message = NULL;

    sr_abrt_print_report_from_dir("../../problem_dir", &error_message);
    struct sr_report *r = sr_abrt_report_from_dir("../../problem_dir", &error_message);

    if (error_message != NULL)
        fprintf(stderr, "%s\n", error_message);

    assert(r);

    /* set reporter_version because the value depends on build */
    r->reporter_version = "0.20.dirty";

    assert(r->report_version == 2);
    assert(strcmp(r->reporter_name, "satyr") == 0);
    assert(r->report_type == SR_REPORT_CORE);
    assert(r->user_root == false);
    assert(r->user_local == true);
    assert(strcmp(r->component_name, "coreutils") == 0);
    assert(r->serial == 55);

    struct sr_operating_system *os = r->operating_system;

    assert(strcmp(os->name, "fedora") == 0);
    assert(strcmp(os->version, "24") == 0);
    assert(strcmp(os->architecture, "x86_64") == 0);
    assert(strcmp(os->cpe, "cpe:/o:fedoraproject:fedora:24") == 0);
    assert(strcmp(os->variant, "workstation") == 0);

    /* packages */
    struct sr_rpm_package *pkg = r->rpm_packages;

    assert(strcmp(pkg->name, "coreutils") == 0);
    assert(pkg->epoch == 0);
    assert(strcmp(pkg->version, "8.25") == 0);
    assert(strcmp(pkg->release, "5.fc24") == 0);
    assert(strcmp(pkg->architecture, "x86_64") == 0);
    assert(pkg->install_time == 1460022612);
    assert(pkg->role == SR_ROLE_AFFECTED);

    struct sr_rpm_package *pkg2 = pkg->next;

    assert(strcmp(pkg2->name, "glibc") == 0);
    assert(pkg2->epoch == 0);
    assert(strcmp(pkg2->version, "2.23.1") == 0);
    assert(strcmp(pkg2->release, "5.fc24") == 0);
    assert(strcmp(pkg2->architecture, "x86_64") == 0);
    assert(pkg2->install_time == 1460022605);

    struct sr_rpm_package *pkg3 = pkg2->next;

    assert(strcmp(pkg3->name, "glibc-all-langpacks") == 0);
    assert(pkg3->epoch == 0);
    assert(strcmp(pkg3->version, "2.23.1") == 0);
    assert(strcmp(pkg3->release, "5.fc24") == 0);
    assert(strcmp(pkg3->architecture, "x86_64") == 0);
    assert(pkg3->install_time == 1460024921);

    /* to json */
    char *report_json = sr_report_to_json(r);
    error_message = NULL;
    char *report_json_from_file = sr_file_to_string("../../json_files/ureport-from-problem-dir", &error_message);

    if (error_message != NULL)
        fprintf(stderr, "%s\n", error_message);

    assert(report_json_from_file);

    /* compare created json string with reference uReport */
    assert(strcmp(report_json, report_json_from_file) == 0);

    free(report_json);
    free(report_json_from_file);

    sr_report_free(r);

    return 0;
}
]])
