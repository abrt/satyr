# Checking the satyr. -*- Autotest -*-

AT_BANNER([Utils])

## ----------- ##
## sr_strcmp0  ##
## ----------- ##

AT_TESTFUN([sr_strcmp0],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  assert(0 == sr_strcmp0(NULL, NULL));
  assert(0 == sr_strcmp0("abab", "abab"));
  assert(0 > sr_strcmp0("aba", "abab"));
  assert(0 > sr_strcmp0(NULL, "abab"));
  assert(0 < sr_strcmp0("abab", NULL));
  assert(0 < sr_strcmp0("abab", "aba"));
  return 0;
}
]])

## ------------------ ##
## sr_strchr_location ##
## ------------------ ##

AT_TESTFUN([sr_strchr_location],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  /* The character is on the first line.*/
  int line, column;
  char *result = sr_strchr_location("test string", 'r', &line, &column);
  assert(0 == strcmp(result, "ring"));
  assert(1 == line);
  assert(7 == column);

  /* The character is on the third line. */
  result = sr_strchr_location("\ntest\n string", 'r', &line, &column);
  assert(0 == strcmp(result, "ring"));
  assert(3 == line);
  assert(3 == column);

  /* The character is not found. */
  result = sr_strchr_location("\ntest\n string", 'z', &line, &column);
  assert(!result);

  /* The character _is_ a newline. */
  result = sr_strchr_location("abcd\nefgh", '\n', &line, &column);
  assert(0 == strcmp(result, "\nefgh"));
  assert(1 == line);
  assert(4 == column);
  return 0;
}
]])

## ------------------ ##
## sr_strstr_location ##
## ------------------ ##

AT_TESTFUN([sr_strstr_location],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  /* The substring is on the first line.*/
  int line, column;
  char *result = sr_strstr_location("test string", "ri", &line, &column);
  assert(0 == strcmp(result, "ring"));
  assert(1 == line);
  assert(7 == column);

  /* The substring is on the third line. */
  result = sr_strstr_location("\ntest\n string", "ri", &line, &column);
  assert(0 == strcmp(result, "ring"));
  assert(3 == line);
  assert(3 == column);

  /* The substring is not found, but the first char is. */
  result = sr_strstr_location("\ntest\n string", "rz", &line, &column);
  assert(!result);

  /* The substring is not found. */
  result = sr_strstr_location("\ntest\n string", "zr", &line, &column);
  assert(!result);

  /* The substring _is_ a newline. */
  result = sr_strstr_location("abcd\nefgh", "\n", &line, &column);
  assert(0 == strcmp(result, "\nefgh"));
  assert(1 == line);
  assert(4 == column);
  return 0;
}
]])

## ------------------ ##
## sr_strspn_location ##
## ------------------ ##

AT_TESTFUN([sr_strspn_location],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  /* No newline in the input.*/
  int line, column;
  size_t count = sr_strspn_location("test string",
                                     "tes ",
                                     &line,
                                     &column);
  assert(7 == count);
  assert(1 == line);
  assert(7 == column);

  /* With some newlines. */
  count = sr_strspn_location("te\nst \nstring",
                              "tes \n",
                              &line,
                              &column);
  assert(9 == count);
  assert(3 == line);
  assert(2 == column);

  return 0;
}
]])

## ------------ ##
## sr_skip_char ##
## ------------ ##

AT_TESTFUN([sr_skip_char],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abc";
  assert(sr_skip_char(&input, 'a'));
  assert(!sr_skip_char(&input, 'c'));
  return 0;
}
]])

## -------------------- ##
## sr_skip_char_limited ##
## -------------------- ##

AT_TESTFUN([sr_skip_char_limited],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abc";
  assert(sr_skip_char_limited(&input, "ab"));
  assert(sr_skip_char_limited(&input, "ab"));
  assert(!sr_skip_char_limited(&input, "ab"));
  return 0;
}
]])

## --------------------- ##
## sr_parse_char_limited ##
## --------------------- ##

AT_TESTFUN([sr_parse_char_limited],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abc";
  char result;

  /* First char in allowed is used. */
  assert(sr_parse_char_limited(&input, "ab", &result));
  assert(*input == 'b' && result == 'a');

  /* No char in allowed is used. */
  assert(!sr_parse_char_limited(&input, "cd", &result));
  assert(*input == 'b' && result == 'a');

  /* Second char in allowed is used. */
  assert(sr_parse_char_limited(&input, "ab", &result));
  assert(*input == 'c' && result == 'b');

  /* Empty set of allowed chars. */
  assert(!sr_parse_char_limited(&input, "", &result));
  assert(*input == 'c' && result == 'b');

  /* Char is multiple times in allowed. */
  assert(sr_parse_char_limited(&input, "cdc", &result));
  assert(*input == '\0' && result == 'c');

  return 0;
}
]])

## --------------------- ##
## sr_skip_char_sequence ##
## --------------------- ##

AT_TESTFUN([sr_skip_char_sequence],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "aaaaabc";
  assert(5 == sr_skip_char_sequence(&input, 'a'));
  assert(1 == sr_skip_char_sequence(&input, 'b'));
  assert(0 == sr_skip_char_sequence(&input, 'b'));
  return 0;
}
]])

## ----------------- ##
## sr_skip_char_span ##
## ----------------- ##

AT_TESTFUN([sr_skip_char_span],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "aabaabc";
  assert(6 == sr_skip_char_span(&input, "ba"));
  assert(0 == sr_skip_char_span(&input, "b"));
  assert(1 == sr_skip_char_span(&input, "bc"));

  /* Test that it can parse empty string. */
  assert(0 == sr_skip_char_span(&input, "abc"));

  return 0;
}
]])

## -------------------------- ##
## sr_skip_char_span_location ##
## -------------------------- ##

AT_TESTFUN([sr_skip_char_span_location],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "aab\naabc";
  int line, column;

  assert(7 == sr_skip_char_span_location(&input, "ba\n", &line, &column));
  assert(2 == line);
  assert(3 == column);

  assert(0 == sr_skip_char_span_location(&input, "b", &line, &column));
  assert(1 == line);
  assert(0 == column);

  assert(1 == sr_skip_char_span_location(&input, "bc", &line, &column));
  assert(1 == line);
  assert(1 == column);

  /* Test that it can parse empty string. */
  assert(0 == sr_skip_char_span_location(&input, "abc", &line, &column));
  assert(1 == line);
  assert(0 == column);

  return 0;
}
]])

## ------------------ ##
## sr_parse_char_span ##
## ------------------ ##

AT_TESTFUN([sr_parse_char_span],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abcd";
  char *result;
  assert(2 == sr_parse_char_span(&input, "ba", &result));
  assert(*input == 'c' && strcmp(result, "ab") == 0);
  assert(0 == sr_parse_char_span(&input, "ba", &result));
  assert(*input == 'c' && strcmp(result, "ab") == 0);
  free(result);
  assert(2 == sr_parse_char_span(&input, "ecfd", &result));
  assert(*input == '\0' && strcmp(result, "cd") == 0);
  free(result);
  return 0;
}
]])

## ------------------- ##
## sr_parse_char_cspan ##
## ------------------- ##

AT_TESTFUN([sr_parse_char_cspan],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abcd";
  char *result;
  assert(sr_parse_char_cspan(&input, "c", &result));
  assert(*input == 'c' && strcmp(result, "ab") == 0);
  assert(!sr_parse_char_cspan(&input, "c", &result));
  assert(*input == 'c' && strcmp(result, "ab") == 0);
  free(result);
  assert(sr_parse_char_cspan(&input, "e", &result));
  assert(*input == '\0' && strcmp(result, "cd") == 0);
  free(result);
  return 0;
}
]])

## -------------- ##
## sr_skip_string ##
## -------------- ##

AT_TESTFUN([sr_skip_string],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abcd";
  assert(2 == sr_skip_string(&input, "ab"));
  assert(*input == 'c');
  assert(0 == sr_skip_string(&input, "cde"));
  assert(2 == sr_skip_string(&input, "cd"));
  assert(0 == sr_skip_string(&input, "cd"));
  return 0;
}
]])

## --------------- ##
## sr_parse_string ##
## --------------- ##

AT_TESTFUN([sr_parse_string],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "abcd";
  char *result;
  assert(sr_parse_string(&input, "ab", &result));
  assert(0 == strcmp(result, "ab"));
  assert(*input == 'c');
  free(result);
  return 0;
}
]])

## ------------ ##
## sr_skip_uint ##
## ------------ ##

AT_TESTFUN([sr_skip_uint],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "10";
  assert(2 == sr_skip_uint(&input));
  assert(*input == '\0');
  return 0;
}
]])

## --------------- ##
## sr_parse_uint32 ##
## --------------- ##

AT_TESTFUN([sr_parse_uint32],
[[
#include "utils.h"
#include <assert.h>
#include <stdint.h>
int main(void)
{
  char *input = "10";
  uint32_t result;
  assert(2 == sr_parse_uint32(&input, &result));
  assert('\0' == *input);
  assert(10 == result);
  return 0;
}
]])

## -------------------------- ##
## sr_skip_hexadecimal_0xuint ##
## -------------------------- ##

AT_TESTFUN([sr_skip_hexadecimal_0xuint],
[[
#include "utils.h"
#include <assert.h>
int main(void)
{
  char *input = "0xffddffddff";
  assert(12 == sr_skip_hexadecimal_0xuint(&input));
  assert(*input == '\0');
  return 0;
}
]])

## ----------------------------- ##
## sr_parse_hexadecimal_0xuint64 ##
## ----------------------------- ##

AT_TESTFUN([sr_parse_hexadecimal_0xuint64],
[[
#include "utils.h"
#include <assert.h>
#include <stdint.h>
int main(void)
{
  char *input = "0x0fafaffff 0x2badf00dbaadf00d";
  uint64_t num;
  assert(11 == sr_parse_hexadecimal_0xuint64(&input, &num));
  assert(*input == ' ');
  assert(num == 0xfafaffff);
  *input++;
  assert(18 == sr_parse_hexadecimal_0xuint64(&input, &num));
  assert(*input == '\0');
  assert(num == 0x2badf00dbaadf00d);
  return 0;
}
]])

## --------- ##
## sr_indent ##
## --------- ##

AT_TESTFUN([sr_indent],
[[
#include "utils.h"
#include <assert.h>
#include <stdint.h>
int main(void)
{
  assert(0 == strcmp(sr_indent("text", 2), "  text"));
  assert(0 == strcmp(sr_indent("text\n", 2), "  text\n"));
  assert(0 == strcmp(sr_indent("text\n\n", 2), "  text\n  \n"));
  return 0;
}
]])

## ---------- ##
## sr_struniq ##
## ---------- ##

AT_TESTFUN([sr_struniq],
[[
#include "utils.h"
#include <assert.h>
void do_check(char **in, size_t inlen, char **out, size_t outlen)
{
  printf("%d %d\n", inlen, outlen);
  sr_struniq(in, &inlen);
  assert(inlen == outlen);

  int i;
  for (i = 0; i < outlen; i++)
  {
    assert(0 == strcmp(in[i], out[i]));
  }
}
#define check(x,y) do_check(x, sizeof(x)/sizeof(x[0]), y, sizeof(y)/sizeof(y[0]))

int main(void)
{
  size_t size = 0;
  sr_struniq(NULL, &size);
  assert(size == 0);

  char *a1[] = {"a"}, *b1[] = {"a"};
  check(a1, b1);

  char *a2[] = {"a", "a"}, *b2[] = {"a"};
  check(a2, b2);

  char *a3[] = {"a", "b"}, *b3[] = {"a", "b"};
  check(a3, b3);

  return 0;
}
]])

## ------------------ ##
## sr_demangle_symbol ##
## ------------------ ##

AT_TESTFUN([sr_demangle_symbol],
[[
#include "utils.h"
#include <assert.h>
#include <string.h>
#include <stdio.h>

int main(void)
{
    sr_debug_parser = true;

    char *result = sr_demangle_symbol("_ZN3Job8WaitDoneEv");
    assert(0 == strcmp(result, "Job::WaitDone()"));

    result = sr_demangle_symbol("not_mangled");
    assert(result == 0);

    result = sr_demangle_symbol("f");
    assert(result == 0);

    return 0;
}
]])
